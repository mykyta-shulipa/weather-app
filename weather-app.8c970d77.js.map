{"version":3,"sources":["utils.js","index.js"],"names":["KELVIN_UNITS","CELSIUS_UNITS","FAHRENHEIT_UNITS","displayInUnits","value","units","Math","round","getDateFromUnixTimestamp","dt","Date","toLocaleDateString","getIconFromCode","iconCode","cityCoordinates","London","lat","lon","Kyiv","Warsaw","Paris","allowedCities","Object","keys","getOpenWeatherMapUrl","cityName","performSearch","window","dataStore","currentCity","error","isDataLoading","validateAndLoadData","then","data","cityByWeather","catch","finally","renderApp","setCurrentUnits","currentUnits","getCurrentCityData","isCurrentCityDataLoaded","hasOwnProperty","includes","join","Promise","resolve","url","fetch","response","json","document","getElementById","innerHTML","App","SearchByCity","WeatherResults","content","UnitSwitch","WeatherToday","WeatherForecast","setCurrentUnitsCB","id","name","map","weatherData","current","temp","weather","main","description","icon","tempInUnits","daily","forecastData","forecastDataItem","WeatherForecastItem","getPreparedForecastData","day","night","dateString","dayTempInUnits","nightTempInUnits","weatherIcon","module","hot","accept"],"mappings":"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","file":"weather-app.8c970d77.js","sourceRoot":"..","sourcesContent":["export const KELVIN_UNITS = 'K';\nexport const CELSIUS_UNITS = 'C';\nexport const FAHRENHEIT_UNITS = 'F';\n\nexport function displayInUnits(value, units) {\n  switch (units) {\n    case CELSIUS_UNITS:\n      return `${Math.round(value - 273.15)}˚C`;\n    case FAHRENHEIT_UNITS:\n      return `${Math.round((value - 273.15) * (9 / 5) + 32)}˚F`;\n    // case KELVIN_UNITS:\n    default:\n      return `${value}˚K`;\n  }\n}\n\nexport function getDateFromUnixTimestamp(dt) {\n  return new Date(dt * 1000).toLocaleDateString();\n}\n\nexport function getIconFromCode(iconCode) {\n  return `<img src=\"http://openweathermap.org/img/wn/${iconCode}@2x.png\" width=\"30px\" height=\"30px\" alt=\"weather icon\">`;\n}\n\nexport const cityCoordinates = {\n  London: {\n    lat: 51.5085,\n    lon: -0.1257,\n  },\n  Kyiv: {\n    lat: 50.4333,\n    lon: 30.5167,\n  },\n  Warsaw: {\n    lat: 52.2298,\n    lon: 21.0118,\n  },\n  Paris: {\n    lat: 48.8534,\n    lon: 2.3488,\n  },\n};\n\nexport const allowedCities = Object.keys(cityCoordinates);\n\nexport function getOpenWeatherMapUrl(cityName) {\n  const { lat, lon } = cityCoordinates[cityName];\n  return `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=minutely,hourly,alerts&appid=${process.env.OPEN_WEATHER_MAP_API_KEY}`;\n}\n","import {\n  allowedCities,\n  CELSIUS_UNITS,\n  displayInUnits,\n  FAHRENHEIT_UNITS,\n  getDateFromUnixTimestamp,\n  getIconFromCode,\n  getOpenWeatherMapUrl,\n} from './utils';\n\nif (module.hot) {\n  module.hot.accept();\n}\n\nwindow.dataStore = window.dataStore || {\n  currentCity: '',\n  isDataLoading: false,\n  error: null,\n  cityByWeather: {},\n  currentUnits: CELSIUS_UNITS,\n};\n\nwindow.renderApp = renderApp;\nwindow.validateAndLoadData = validateAndLoadData;\nwindow.performSearch = performSearch;\n\nrenderApp();\n\nfunction performSearch(cityName) {\n  window.dataStore.currentCity = cityName;\n  window.dataStore.error = null;\n  window.dataStore.isDataLoading = true;\n\n  window\n    .validateAndLoadData()\n    .then(({ error, data }) => {\n      window.dataStore.isDataLoading = false;\n\n      if (error) {\n        window.dataStore.error = error;\n      } else if (data) {\n        window.dataStore.cityByWeather[cityName] = data;\n      }\n    })\n    .catch(() => {\n      window.dataStore.error = 'Some error occurred.';\n    })\n    .finally(window.renderApp);\n}\n\nfunction setCurrentUnits(value) {\n  window.dataStore.currentUnits = value;\n  window.renderApp();\n}\n\nfunction getCurrentCityData() {\n  const { currentCity, cityByWeather } = window.dataStore;\n  return cityByWeather[currentCity];\n}\n\nfunction isCurrentCityDataLoaded() {\n  const { currentCity, cityByWeather } = window.dataStore;\n  return cityByWeather.hasOwnProperty(currentCity);\n}\n\nfunction validateAndLoadData() {\n  const { currentCity } = window.dataStore;\n\n  if (!allowedCities.includes(currentCity)) {\n    const error = `Enter one of the city names: ${allowedCities.join(', ')}.`;\n    return Promise.resolve({ error });\n  }\n\n  if (!isCurrentCityDataLoaded()) {\n    const url = getOpenWeatherMapUrl(currentCity);\n    return fetch(url)\n      .then(response => response.json())\n      .then(data => ({ data }));\n  }\n\n  // no errors and no new data loaded, app will take data from cache\n  return Promise.resolve({});\n}\n\nfunction renderApp() {\n  document.getElementById('app-root').innerHTML = `\n        ${App()}\n    `;\n}\n\nfunction App() {\n  return `<div>\n   ${SearchByCity()}\n   ${WeatherResults()}\n  </div>`;\n}\n\nfunction WeatherResults() {\n  const { isDataLoading, currentUnits, error, currentCity } = window.dataStore;\n  let content = '';\n  if (currentCity === '') {\n    content = 'Search by city name';\n  } else {\n    if (isDataLoading) {\n      content = 'Loading...';\n    }\n\n    if (error !== null) {\n      content = error;\n    }\n\n    if (isCurrentCityDataLoaded()) {\n      content = `\n       ${UnitSwitch(currentUnits, setCurrentUnits)}\n       <br/>\n       ${WeatherToday()}\n       <br/>\n       ${WeatherForecast()}\n    `;\n    }\n  }\n\n  return `<p>${content}</p>`;\n}\n\nfunction UnitSwitch(currentUnits, setCurrentUnitsCB) {\n  return `\n    <p>Select units</p>\n  ${[\n    { id: 'celsius-units', value: CELSIUS_UNITS, name: 'C' },\n    { id: 'fahrenheit-units', value: FAHRENHEIT_UNITS, name: 'F' },\n  ]\n    .map(\n      ({ id, value, name }) =>\n        `<div>\n          <input \n              type=\"radio\" \n              id=\"${id}\"\n              name=\"temperature-units\" \n              value=\"${value}\" \n              ${currentUnits === value ? ' checked ' : ''} \n              onchange=\"(${setCurrentUnitsCB})(this.value);\"\n          >\n            <label for=\"${id}\">˚${name}</label>\n        </div>`,\n    )\n    .join('')}\n`;\n}\n\nfunction SearchByCity() {\n  return `\n    <input\n        type=\"text\"\n        value=\"${window.dataStore.currentCity}\"\n        onchange=\"window.performSearch(this.value)\"\n    />\n`;\n}\n\nfunction WeatherToday() {\n  const { currentCity, currentUnits } = window.dataStore;\n  const weatherData = getCurrentCityData();\n  let content = '';\n\n  if (weatherData) {\n    const {\n      current: {\n        dt,\n        temp,\n        weather: [{ main, description, icon }],\n      },\n    } = weatherData;\n    const tempInUnits = displayInUnits(temp, currentUnits);\n    const dateString = getDateFromUnixTimestamp(dt);\n    const weatherIcon = getIconFromCode(icon);\n    content += `<div>Weather for ${dateString} in ${currentCity}:</div>`;\n    content += `<div>${weatherIcon} ${main} (${description}). Temperature is ${tempInUnits}</div>`;\n  }\n\n  return content ? `<div>${content}</div>` : '';\n}\n\nfunction WeatherForecast() {\n  const { currentCity, currentUnits } = window.dataStore;\n  const weatherData = getCurrentCityData();\n  let content = '';\n\n  function getPreparedForecastData({\n    dt,\n    temp: { day, night },\n    weather: [{ main, description, icon }],\n  }) {\n    const dateString = getDateFromUnixTimestamp(dt);\n    const dayTempInUnits = displayInUnits(day, currentUnits);\n    const nightTempInUnits = displayInUnits(night, currentUnits);\n    const weatherIcon = getIconFromCode(icon);\n\n    return {\n      dateString,\n      dayTempInUnits,\n      description,\n      main,\n      nightTempInUnits,\n      weatherIcon,\n    };\n  }\n\n  if (weatherData) {\n    content += `<div>Weather forecast for ${currentCity}:</div>`;\n    const {\n      daily: [, ...forecastData],\n    } = weatherData;\n    const forecastItems = forecastData.map(forecastDataItem => {\n      const preparedForecastDataItem = getPreparedForecastData(forecastDataItem);\n      return WeatherForecastItem(preparedForecastDataItem);\n    });\n    content += forecastItems.join('');\n  }\n\n  return content ? `<div>${content}</div>` : '';\n}\n\nfunction WeatherForecastItem({\n  dateString,\n  dayTempInUnits,\n  description,\n  main,\n  nightTempInUnits,\n  weatherIcon,\n}) {\n  return `<div>For ${dateString}, ${weatherIcon} ${main} (${description}). Day at ${dayTempInUnits}, night at ${nightTempInUnits}</div>`;\n}\n"]}